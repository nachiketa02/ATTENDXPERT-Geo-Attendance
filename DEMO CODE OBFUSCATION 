# DEMO CODE OBFUSCATION 
/* DUE TO SECURITY Reasons I can onlys show half code in obscure modde 

Please also refer to the attached PDF file, which contains the screenshots in document form.

VIST --- https://attendxpert-geo-attendance.netlify.app/
# Contact for information 
   - Gamil----   attendxpert@gmail.com 
   - Gmail----   nachiketadebnath1@gmail.com
   - inkedin----https://www.linkedin.com/in/nachiketadebnath/

AttendXpert Geo-Attendance is a Made in India hybrid solution that combines GPS technology, timetable logic, and cloud software to bring affordable, intelligent, and secure attendance tracking for the modern era.

‚ÄúFrom classrooms to corporates ‚Äî AttendXpert brings location + time-powered attendance, proudly built in India.‚Äù üáÆüá≥

*/

copy code in notepad in windowas/ mac text editor 
save as .html  to open it locally ....

Please also refer to the attached PDF file, which contains the screenshots in document form.

# OBSCURE HTML CODE
<script>document.write(atob(""))</script>
